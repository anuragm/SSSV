//  runSSSV.hpp
//  SSSV
//
//  Created by Anurag Mishra on 5/21/14.
//  Copyright (c) 2014 Anurag Mishra. All rights reserved.
//

#ifndef SSSV_runSSSV_hpp
#define SSSV_runSSSV_hpp

#include <armadillo>

//definitions

//Performs a single run of SSSV, and returns a vector of size of number of qubits. Thee are the angles generated by
//running the SSSV algorithm.
//Inputs: h, J, number of sweeps, temperature and the annnealing schedule.
arma::vec runSSSV(const arma::vec& h, const arma::mat& J, int numOfSweeps, double temperature, const arma::mat& schedule, bool newHam = false);

//Return the signature hamiltonian. The size is dictated by length of h which is supplied as output.
//Input: the scale of Hamiltonian, the variance of noise. Output: parameters h and J of Ising Hamiltonian.
void getSigHam(double scale, double variance, arma::vec* h, arma::mat* J);

//Returns a normal random number with mean 0, and variance taken as input. Uses drand48(), so use srand48() to initialize
//the random number generator. We use the Box-Muller method to generate random numbers.
double nrand48(double variance);

//Reads the Hamiltonian from a file. If fileName is omitted, it tries to read from "hamiltonian.config" from the current folder.
//Returns the ising Hamiltonian paramters h and J.
//The first line of the configuration file has two intergers, the number of qubits, and number of lines in the file after this line.
//Each subsequent line has format (i j value). If i==j, the local field is filled with the value. If i!=j, the value defines the coupling
//between qubit i and j.
void readHamiltonian(arma::vec* h,arma::mat* J,const std::string& fileName="" );

//Reads the paremeters of SSSV simulations from file. If fileName is omitted, the parameters are read from "SSSV.config". If that
//file is not find, a std::logic_error is raised. The file should have each parameter seperated by new line, the parameters being in
//order supplied to function.
void readParameters(int* numOfSSSVRuns, int* numOfSweeps, double* temperature, double* noise, const std::string& fileName = "");

//Gets all the scaling from fileName. If fileName is empty, we try to read from file "scaling.config". If we cannot read the file,
//default value of no scaling, that is, 1 is returned, with corresponding warning on console.
arma::vec getScalings(const std::string& fileName="");

//Given Ising hamiltonian parameters 'h_noNoise' and 'J_noNoise', this function return h and J, such that a noise of standard deviation
//'noise' is added to the each of the non-zero fields and couplings.
void addNoise(arma::vec* h, arma::mat* J, const arma::vec& h_noNoise, const arma::mat& J_noNoise, double noise);



//----------------------------------------------------------------------------------------//
//template functions and classes

#endif